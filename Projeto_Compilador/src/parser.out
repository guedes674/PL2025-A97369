Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST
    LABEL
    UMINUS
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> header block DOT
Rule 2     header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON
Rule 3     header -> PROGRAM ID SEMICOLON
Rule 4     id_list -> id_list COMMA ID
Rule 5     id_list -> ID
Rule 6     empty -> <empty>
Rule 7     block -> declarations compound_statement
Rule 8     declarations -> declarations variable_declaration
Rule 9     declarations -> declarations function_declaration
Rule 10    declarations -> declarations procedure_declaration
Rule 11    declarations -> empty
Rule 12    variable_declaration -> VAR variable_list SEMICOLON
Rule 13    function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON
Rule 14    procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON
Rule 15    variable_list -> variable_list SEMICOLON variable
Rule 16    variable_list -> variable
Rule 17    variable -> id_list COLON type
Rule 18    type -> ID
Rule 19    type -> INTEGER
Rule 20    type -> REAL
Rule 21    type -> BOOLEAN
Rule 22    type -> CHAR
Rule 23    type -> BYTE
Rule 24    type -> WORD
Rule 25    type -> LONGINT
Rule 26    type -> SHORTINT
Rule 27    type -> SINGLE
Rule 28    type -> DOUBLE
Rule 29    type -> STRING
Rule 30    type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type
Rule 31    field_list -> field_list SEMICOLON field
Rule 32    field_list -> field
Rule 33    field -> id_list COLON type
Rule 34    parameter_list -> LPAREN parameter_section_list RPAREN
Rule 35    parameter_list -> empty
Rule 36    parameter_section_list -> parameter_section_list SEMICOLON parameter_section
Rule 37    parameter_section_list -> parameter_section
Rule 38    parameter_section -> id_list COLON type
Rule 39    parameter_section -> VAR id_list COLON type
Rule 40    compound_statement -> BEGIN statement_list END
Rule 41    statement_list -> statement_list SEMICOLON statement
Rule 42    statement_list -> statement
Rule 43    statement -> assignment_statement
Rule 44    statement -> expression
Rule 45    statement -> compound_statement
Rule 46    statement -> io_statement
Rule 47    statement -> if_statement
Rule 48    statement -> while_statement
Rule 49    statement -> for_statement
Rule 50    statement -> empty
Rule 51    assignment_statement -> ID ASSIGN expression
Rule 52    expression -> additive_expression
Rule 53    expression -> expression EQUALS additive_expression
Rule 54    expression -> expression NE additive_expression
Rule 55    expression -> expression LT additive_expression
Rule 56    expression -> expression GT additive_expression
Rule 57    expression -> expression LE additive_expression
Rule 58    expression -> expression GE additive_expression
Rule 59    expression -> expression IN additive_expression
Rule 60    additive_expression -> multiplicative_expression
Rule 61    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 62    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 63    additive_expression -> additive_expression OR multiplicative_expression
Rule 64    additive_expression -> additive_expression ORELSE multiplicative_expression
Rule 65    multiplicative_expression -> factor
Rule 66    multiplicative_expression -> multiplicative_expression TIMES factor
Rule 67    multiplicative_expression -> multiplicative_expression DIVIDE factor
Rule 68    multiplicative_expression -> multiplicative_expression DIV factor
Rule 69    multiplicative_expression -> multiplicative_expression MOD factor
Rule 70    multiplicative_expression -> multiplicative_expression AND factor
Rule 71    multiplicative_expression -> multiplicative_expression ANDTHEN factor
Rule 72    factor -> NUMBER
Rule 73    factor -> STRING
Rule 74    factor -> ID
Rule 75    factor -> TRUE
Rule 76    factor -> FALSE
Rule 77    factor -> LPAREN expression RPAREN
Rule 78    factor -> factor LBRACKET expression RBRACKET
Rule 79    factor -> ID LPAREN expression_list RPAREN
Rule 80    factor -> MINUS factor
Rule 81    factor -> NOT factor
Rule 82    expression_list -> expression_list COMMA expression
Rule 83    expression_list -> expression
Rule 84    expression_list -> empty
Rule 85    io_statement -> WRITE LPAREN expression_list RPAREN
Rule 86    io_statement -> WRITELN LPAREN expression_list RPAREN
Rule 87    io_statement -> READ LPAREN expression_list RPAREN
Rule 88    io_statement -> READLN LPAREN expression_list RPAREN
Rule 89    if_statement -> IF expression THEN statement ELSE statement
Rule 90    if_statement -> IF expression THEN statement
Rule 91    while_statement -> WHILE expression DO statement
Rule 92    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 93    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement

Terminals, with rules where they appear

AND                  : 70
ANDTHEN              : 71
ARRAY                : 30
ASSIGN               : 51 92 93
BEGIN                : 40
BOOLEAN              : 21
BYTE                 : 23
CHAR                 : 22
COLON                : 13 17 33 38 39
COMMA                : 4 82
CONST                : 
DIV                  : 68
DIVIDE               : 67
DO                   : 91 92 93
DOT                  : 1 30 30
DOUBLE               : 28
DOWNTO               : 93
ELSE                 : 89
END                  : 40
EQUALS               : 53
FALSE                : 76
FOR                  : 92 93
FUNCTION             : 13
GE                   : 58
GT                   : 56
ID                   : 2 3 4 5 13 14 18 51 74 79 92 93
IF                   : 89 90
IN                   : 59
INTEGER              : 19
LABEL                : 
LBRACKET             : 30 78
LE                   : 57
LONGINT              : 25
LPAREN               : 2 34 77 79 85 86 87 88
LT                   : 55
MINUS                : 62 80
MOD                  : 69
NE                   : 54
NOT                  : 81
NUMBER               : 30 30 72
OF                   : 30
OR                   : 63
ORELSE               : 64
PLUS                 : 61
PROCEDURE            : 14
PROGRAM              : 2 3
RBRACKET             : 30 78
READ                 : 87
READLN               : 88
REAL                 : 20
RPAREN               : 2 34 77 79 85 86 87 88
SEMICOLON            : 2 3 12 13 13 14 14 15 31 36 41
SHORTINT             : 26
SINGLE               : 27
STRING               : 29 73
THEN                 : 89 90
TIMES                : 66
TO                   : 92
TRUE                 : 75
UMINUS               : 
UNTIL                : 
VAR                  : 12 39
WHILE                : 91
WITH                 : 
WORD                 : 24
WRITE                : 85
WRITELN              : 86
error                : 

Nonterminals, with rules where they appear

additive_expression  : 52 53 54 55 56 57 58 59 61 62 63 64
assignment_statement : 43
block                : 1 13 14
compound_statement   : 7 45
declarations         : 7 8 9 10
empty                : 11 35 50 84
expression           : 44 51 53 54 55 56 57 58 59 77 78 82 83 89 90 91 92 92 93 93
expression_list      : 79 82 85 86 87 88
factor               : 65 66 67 68 69 70 71 78 80 81
field                : 31 32
field_list           : 31
for_statement        : 49
function_declaration : 9
header               : 1
id_list              : 2 4 17 33 38 39
if_statement         : 47
io_statement         : 46
multiplicative_expression : 60 61 62 63 64 66 67 68 69 70 71
parameter_list       : 13 14
parameter_section    : 36 37
parameter_section_list : 34 36
procedure_declaration : 10
program              : 0
statement            : 41 42 89 89 90 91 92 93
statement_list       : 40 41
type                 : 13 17 30 33 38 39
variable             : 15 16
variable_declaration : 8
variable_list        : 12 15
while_statement      : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header block DOT
    (2) header -> . PROGRAM ID LPAREN id_list RPAREN SEMICOLON
    (3) header -> . PROGRAM ID SEMICOLON

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . block DOT
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 4
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 3

    (2) header -> PROGRAM . ID LPAREN id_list RPAREN SEMICOLON
    (3) header -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 7


state 4

    (1) program -> header block . DOT

    DOT             shift and go to state 8


state 5

    (7) block -> declarations . compound_statement
    (8) declarations -> declarations . variable_declaration
    (9) declarations -> declarations . function_declaration
    (10) declarations -> declarations . procedure_declaration
    (40) compound_statement -> . BEGIN statement_list END
    (12) variable_declaration -> . VAR variable_list SEMICOLON
    (13) function_declaration -> . FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON
    (14) procedure_declaration -> . PROCEDURE ID parameter_list SEMICOLON block SEMICOLON

    BEGIN           shift and go to state 13
    VAR             shift and go to state 14
    FUNCTION        shift and go to state 15
    PROCEDURE       shift and go to state 16

    compound_statement             shift and go to state 9
    variable_declaration           shift and go to state 10
    function_declaration           shift and go to state 11
    procedure_declaration          shift and go to state 12

state 6

    (11) declarations -> empty .

    BEGIN           reduce using rule 11 (declarations -> empty .)
    VAR             reduce using rule 11 (declarations -> empty .)
    FUNCTION        reduce using rule 11 (declarations -> empty .)
    PROCEDURE       reduce using rule 11 (declarations -> empty .)


state 7

    (2) header -> PROGRAM ID . LPAREN id_list RPAREN SEMICOLON
    (3) header -> PROGRAM ID . SEMICOLON

    LPAREN          shift and go to state 17
    SEMICOLON       shift and go to state 18


state 8

    (1) program -> header block DOT .

    $end            reduce using rule 1 (program -> header block DOT .)


state 9

    (7) block -> declarations compound_statement .

    DOT             reduce using rule 7 (block -> declarations compound_statement .)
    SEMICOLON       reduce using rule 7 (block -> declarations compound_statement .)


state 10

    (8) declarations -> declarations variable_declaration .

    BEGIN           reduce using rule 8 (declarations -> declarations variable_declaration .)
    VAR             reduce using rule 8 (declarations -> declarations variable_declaration .)
    FUNCTION        reduce using rule 8 (declarations -> declarations variable_declaration .)
    PROCEDURE       reduce using rule 8 (declarations -> declarations variable_declaration .)


state 11

    (9) declarations -> declarations function_declaration .

    BEGIN           reduce using rule 9 (declarations -> declarations function_declaration .)
    VAR             reduce using rule 9 (declarations -> declarations function_declaration .)
    FUNCTION        reduce using rule 9 (declarations -> declarations function_declaration .)
    PROCEDURE       reduce using rule 9 (declarations -> declarations function_declaration .)


state 12

    (10) declarations -> declarations procedure_declaration .

    BEGIN           reduce using rule 10 (declarations -> declarations procedure_declaration .)
    VAR             reduce using rule 10 (declarations -> declarations procedure_declaration .)
    FUNCTION        reduce using rule 10 (declarations -> declarations procedure_declaration .)
    PROCEDURE       reduce using rule 10 (declarations -> declarations procedure_declaration .)


state 13

    (40) compound_statement -> BEGIN . statement_list END
    (41) statement_list -> . statement_list SEMICOLON statement
    (42) statement_list -> . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    statement_list                 shift and go to state 19
    statement                      shift and go to state 20
    assignment_statement           shift and go to state 21
    expression                     shift and go to state 22
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 14

    (12) variable_declaration -> VAR . variable_list SEMICOLON
    (15) variable_list -> . variable_list SEMICOLON variable
    (16) variable_list -> . variable
    (17) variable -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    variable_list                  shift and go to state 47
    variable                       shift and go to state 48
    id_list                        shift and go to state 49

state 15

    (13) function_declaration -> FUNCTION . ID parameter_list COLON type SEMICOLON block SEMICOLON

    ID              shift and go to state 51


state 16

    (14) procedure_declaration -> PROCEDURE . ID parameter_list SEMICOLON block SEMICOLON

    ID              shift and go to state 52


state 17

    (2) header -> PROGRAM ID LPAREN . id_list RPAREN SEMICOLON
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    id_list                        shift and go to state 53

state 18

    (3) header -> PROGRAM ID SEMICOLON .

    BEGIN           reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    VAR             reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    FUNCTION        reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)
    PROCEDURE       reduce using rule 3 (header -> PROGRAM ID SEMICOLON .)


state 19

    (40) compound_statement -> BEGIN statement_list . END
    (41) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 54
    SEMICOLON       shift and go to state 55


state 20

    (42) statement_list -> statement .

    END             reduce using rule 42 (statement_list -> statement .)
    SEMICOLON       reduce using rule 42 (statement_list -> statement .)


state 21

    (43) statement -> assignment_statement .

    END             reduce using rule 43 (statement -> assignment_statement .)
    SEMICOLON       reduce using rule 43 (statement -> assignment_statement .)
    ELSE            reduce using rule 43 (statement -> assignment_statement .)


state 22

    (44) statement -> expression .
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    END             reduce using rule 44 (statement -> expression .)
    SEMICOLON       reduce using rule 44 (statement -> expression .)
    ELSE            reduce using rule 44 (statement -> expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 23

    (45) statement -> compound_statement .

    END             reduce using rule 45 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 45 (statement -> compound_statement .)
    ELSE            reduce using rule 45 (statement -> compound_statement .)


state 24

    (46) statement -> io_statement .

    END             reduce using rule 46 (statement -> io_statement .)
    SEMICOLON       reduce using rule 46 (statement -> io_statement .)
    ELSE            reduce using rule 46 (statement -> io_statement .)


state 25

    (47) statement -> if_statement .

    END             reduce using rule 47 (statement -> if_statement .)
    SEMICOLON       reduce using rule 47 (statement -> if_statement .)
    ELSE            reduce using rule 47 (statement -> if_statement .)


state 26

    (48) statement -> while_statement .

    END             reduce using rule 48 (statement -> while_statement .)
    SEMICOLON       reduce using rule 48 (statement -> while_statement .)
    ELSE            reduce using rule 48 (statement -> while_statement .)


state 27

    (49) statement -> for_statement .

    END             reduce using rule 49 (statement -> for_statement .)
    SEMICOLON       reduce using rule 49 (statement -> for_statement .)
    ELSE            reduce using rule 49 (statement -> for_statement .)


state 28

    (50) statement -> empty .

    END             reduce using rule 50 (statement -> empty .)
    SEMICOLON       reduce using rule 50 (statement -> empty .)
    ELSE            reduce using rule 50 (statement -> empty .)


state 29

    (51) assignment_statement -> ID . ASSIGN expression
    (74) factor -> ID .
    (79) factor -> ID . LPAREN expression_list RPAREN

    ASSIGN          shift and go to state 63
    LBRACKET        reduce using rule 74 (factor -> ID .)
    TIMES           reduce using rule 74 (factor -> ID .)
    DIVIDE          reduce using rule 74 (factor -> ID .)
    DIV             reduce using rule 74 (factor -> ID .)
    MOD             reduce using rule 74 (factor -> ID .)
    AND             reduce using rule 74 (factor -> ID .)
    ANDTHEN         reduce using rule 74 (factor -> ID .)
    PLUS            reduce using rule 74 (factor -> ID .)
    MINUS           reduce using rule 74 (factor -> ID .)
    OR              reduce using rule 74 (factor -> ID .)
    ORELSE          reduce using rule 74 (factor -> ID .)
    EQUALS          reduce using rule 74 (factor -> ID .)
    NE              reduce using rule 74 (factor -> ID .)
    LT              reduce using rule 74 (factor -> ID .)
    GT              reduce using rule 74 (factor -> ID .)
    LE              reduce using rule 74 (factor -> ID .)
    GE              reduce using rule 74 (factor -> ID .)
    IN              reduce using rule 74 (factor -> ID .)
    END             reduce using rule 74 (factor -> ID .)
    SEMICOLON       reduce using rule 74 (factor -> ID .)
    ELSE            reduce using rule 74 (factor -> ID .)
    LPAREN          shift and go to state 64


state 30

    (52) expression -> additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 52 (expression -> additive_expression .)
    NE              reduce using rule 52 (expression -> additive_expression .)
    LT              reduce using rule 52 (expression -> additive_expression .)
    GT              reduce using rule 52 (expression -> additive_expression .)
    LE              reduce using rule 52 (expression -> additive_expression .)
    GE              reduce using rule 52 (expression -> additive_expression .)
    IN              reduce using rule 52 (expression -> additive_expression .)
    END             reduce using rule 52 (expression -> additive_expression .)
    SEMICOLON       reduce using rule 52 (expression -> additive_expression .)
    RPAREN          reduce using rule 52 (expression -> additive_expression .)
    THEN            reduce using rule 52 (expression -> additive_expression .)
    DO              reduce using rule 52 (expression -> additive_expression .)
    ELSE            reduce using rule 52 (expression -> additive_expression .)
    COMMA           reduce using rule 52 (expression -> additive_expression .)
    RBRACKET        reduce using rule 52 (expression -> additive_expression .)
    TO              reduce using rule 52 (expression -> additive_expression .)
    DOWNTO          reduce using rule 52 (expression -> additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 31

    (85) io_statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 69


state 32

    (77) factor -> LPAREN . expression RPAREN
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 70
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 33

    (86) io_statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 72


state 34

    (87) io_statement -> READ . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 73


state 35

    (88) io_statement -> READLN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 74


state 36

    (89) if_statement -> IF . expression THEN statement ELSE statement
    (90) if_statement -> IF . expression THEN statement
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 75
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 37

    (91) while_statement -> WHILE . expression DO statement
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 76
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 38

    (92) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (93) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 77


state 39

    (60) additive_expression -> multiplicative_expression .
    (66) multiplicative_expression -> multiplicative_expression . TIMES factor
    (67) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (68) multiplicative_expression -> multiplicative_expression . DIV factor
    (69) multiplicative_expression -> multiplicative_expression . MOD factor
    (70) multiplicative_expression -> multiplicative_expression . AND factor
    (71) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    ORELSE          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    IN              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 60 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    THEN            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    DO              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 60 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 60 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 60 (additive_expression -> multiplicative_expression .)
    TO              reduce using rule 60 (additive_expression -> multiplicative_expression .)
    DOWNTO          reduce using rule 60 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    DIV             shift and go to state 80
    MOD             shift and go to state 81
    AND             shift and go to state 82
    ANDTHEN         shift and go to state 83


state 40

    (80) factor -> MINUS . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 84

state 41

    (65) multiplicative_expression -> factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 65 (multiplicative_expression -> factor .)
    DIVIDE          reduce using rule 65 (multiplicative_expression -> factor .)
    DIV             reduce using rule 65 (multiplicative_expression -> factor .)
    MOD             reduce using rule 65 (multiplicative_expression -> factor .)
    AND             reduce using rule 65 (multiplicative_expression -> factor .)
    ANDTHEN         reduce using rule 65 (multiplicative_expression -> factor .)
    PLUS            reduce using rule 65 (multiplicative_expression -> factor .)
    MINUS           reduce using rule 65 (multiplicative_expression -> factor .)
    OR              reduce using rule 65 (multiplicative_expression -> factor .)
    ORELSE          reduce using rule 65 (multiplicative_expression -> factor .)
    EQUALS          reduce using rule 65 (multiplicative_expression -> factor .)
    NE              reduce using rule 65 (multiplicative_expression -> factor .)
    LT              reduce using rule 65 (multiplicative_expression -> factor .)
    GT              reduce using rule 65 (multiplicative_expression -> factor .)
    LE              reduce using rule 65 (multiplicative_expression -> factor .)
    GE              reduce using rule 65 (multiplicative_expression -> factor .)
    IN              reduce using rule 65 (multiplicative_expression -> factor .)
    END             reduce using rule 65 (multiplicative_expression -> factor .)
    SEMICOLON       reduce using rule 65 (multiplicative_expression -> factor .)
    RPAREN          reduce using rule 65 (multiplicative_expression -> factor .)
    THEN            reduce using rule 65 (multiplicative_expression -> factor .)
    DO              reduce using rule 65 (multiplicative_expression -> factor .)
    ELSE            reduce using rule 65 (multiplicative_expression -> factor .)
    COMMA           reduce using rule 65 (multiplicative_expression -> factor .)
    RBRACKET        reduce using rule 65 (multiplicative_expression -> factor .)
    TO              reduce using rule 65 (multiplicative_expression -> factor .)
    DOWNTO          reduce using rule 65 (multiplicative_expression -> factor .)
    LBRACKET        shift and go to state 85


state 42

    (72) factor -> NUMBER .

    LBRACKET        reduce using rule 72 (factor -> NUMBER .)
    TIMES           reduce using rule 72 (factor -> NUMBER .)
    DIVIDE          reduce using rule 72 (factor -> NUMBER .)
    DIV             reduce using rule 72 (factor -> NUMBER .)
    MOD             reduce using rule 72 (factor -> NUMBER .)
    AND             reduce using rule 72 (factor -> NUMBER .)
    ANDTHEN         reduce using rule 72 (factor -> NUMBER .)
    PLUS            reduce using rule 72 (factor -> NUMBER .)
    MINUS           reduce using rule 72 (factor -> NUMBER .)
    OR              reduce using rule 72 (factor -> NUMBER .)
    ORELSE          reduce using rule 72 (factor -> NUMBER .)
    EQUALS          reduce using rule 72 (factor -> NUMBER .)
    NE              reduce using rule 72 (factor -> NUMBER .)
    LT              reduce using rule 72 (factor -> NUMBER .)
    GT              reduce using rule 72 (factor -> NUMBER .)
    LE              reduce using rule 72 (factor -> NUMBER .)
    GE              reduce using rule 72 (factor -> NUMBER .)
    IN              reduce using rule 72 (factor -> NUMBER .)
    END             reduce using rule 72 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 72 (factor -> NUMBER .)
    RPAREN          reduce using rule 72 (factor -> NUMBER .)
    THEN            reduce using rule 72 (factor -> NUMBER .)
    DO              reduce using rule 72 (factor -> NUMBER .)
    ELSE            reduce using rule 72 (factor -> NUMBER .)
    COMMA           reduce using rule 72 (factor -> NUMBER .)
    RBRACKET        reduce using rule 72 (factor -> NUMBER .)
    TO              reduce using rule 72 (factor -> NUMBER .)
    DOWNTO          reduce using rule 72 (factor -> NUMBER .)


state 43

    (73) factor -> STRING .

    LBRACKET        reduce using rule 73 (factor -> STRING .)
    TIMES           reduce using rule 73 (factor -> STRING .)
    DIVIDE          reduce using rule 73 (factor -> STRING .)
    DIV             reduce using rule 73 (factor -> STRING .)
    MOD             reduce using rule 73 (factor -> STRING .)
    AND             reduce using rule 73 (factor -> STRING .)
    ANDTHEN         reduce using rule 73 (factor -> STRING .)
    PLUS            reduce using rule 73 (factor -> STRING .)
    MINUS           reduce using rule 73 (factor -> STRING .)
    OR              reduce using rule 73 (factor -> STRING .)
    ORELSE          reduce using rule 73 (factor -> STRING .)
    EQUALS          reduce using rule 73 (factor -> STRING .)
    NE              reduce using rule 73 (factor -> STRING .)
    LT              reduce using rule 73 (factor -> STRING .)
    GT              reduce using rule 73 (factor -> STRING .)
    LE              reduce using rule 73 (factor -> STRING .)
    GE              reduce using rule 73 (factor -> STRING .)
    IN              reduce using rule 73 (factor -> STRING .)
    END             reduce using rule 73 (factor -> STRING .)
    SEMICOLON       reduce using rule 73 (factor -> STRING .)
    RPAREN          reduce using rule 73 (factor -> STRING .)
    THEN            reduce using rule 73 (factor -> STRING .)
    DO              reduce using rule 73 (factor -> STRING .)
    ELSE            reduce using rule 73 (factor -> STRING .)
    COMMA           reduce using rule 73 (factor -> STRING .)
    RBRACKET        reduce using rule 73 (factor -> STRING .)
    TO              reduce using rule 73 (factor -> STRING .)
    DOWNTO          reduce using rule 73 (factor -> STRING .)


state 44

    (75) factor -> TRUE .

    LBRACKET        reduce using rule 75 (factor -> TRUE .)
    TIMES           reduce using rule 75 (factor -> TRUE .)
    DIVIDE          reduce using rule 75 (factor -> TRUE .)
    DIV             reduce using rule 75 (factor -> TRUE .)
    MOD             reduce using rule 75 (factor -> TRUE .)
    AND             reduce using rule 75 (factor -> TRUE .)
    ANDTHEN         reduce using rule 75 (factor -> TRUE .)
    PLUS            reduce using rule 75 (factor -> TRUE .)
    MINUS           reduce using rule 75 (factor -> TRUE .)
    OR              reduce using rule 75 (factor -> TRUE .)
    ORELSE          reduce using rule 75 (factor -> TRUE .)
    EQUALS          reduce using rule 75 (factor -> TRUE .)
    NE              reduce using rule 75 (factor -> TRUE .)
    LT              reduce using rule 75 (factor -> TRUE .)
    GT              reduce using rule 75 (factor -> TRUE .)
    LE              reduce using rule 75 (factor -> TRUE .)
    GE              reduce using rule 75 (factor -> TRUE .)
    IN              reduce using rule 75 (factor -> TRUE .)
    END             reduce using rule 75 (factor -> TRUE .)
    SEMICOLON       reduce using rule 75 (factor -> TRUE .)
    RPAREN          reduce using rule 75 (factor -> TRUE .)
    THEN            reduce using rule 75 (factor -> TRUE .)
    DO              reduce using rule 75 (factor -> TRUE .)
    ELSE            reduce using rule 75 (factor -> TRUE .)
    COMMA           reduce using rule 75 (factor -> TRUE .)
    RBRACKET        reduce using rule 75 (factor -> TRUE .)
    TO              reduce using rule 75 (factor -> TRUE .)
    DOWNTO          reduce using rule 75 (factor -> TRUE .)


state 45

    (76) factor -> FALSE .

    LBRACKET        reduce using rule 76 (factor -> FALSE .)
    TIMES           reduce using rule 76 (factor -> FALSE .)
    DIVIDE          reduce using rule 76 (factor -> FALSE .)
    DIV             reduce using rule 76 (factor -> FALSE .)
    MOD             reduce using rule 76 (factor -> FALSE .)
    AND             reduce using rule 76 (factor -> FALSE .)
    ANDTHEN         reduce using rule 76 (factor -> FALSE .)
    PLUS            reduce using rule 76 (factor -> FALSE .)
    MINUS           reduce using rule 76 (factor -> FALSE .)
    OR              reduce using rule 76 (factor -> FALSE .)
    ORELSE          reduce using rule 76 (factor -> FALSE .)
    EQUALS          reduce using rule 76 (factor -> FALSE .)
    NE              reduce using rule 76 (factor -> FALSE .)
    LT              reduce using rule 76 (factor -> FALSE .)
    GT              reduce using rule 76 (factor -> FALSE .)
    LE              reduce using rule 76 (factor -> FALSE .)
    GE              reduce using rule 76 (factor -> FALSE .)
    IN              reduce using rule 76 (factor -> FALSE .)
    END             reduce using rule 76 (factor -> FALSE .)
    SEMICOLON       reduce using rule 76 (factor -> FALSE .)
    RPAREN          reduce using rule 76 (factor -> FALSE .)
    THEN            reduce using rule 76 (factor -> FALSE .)
    DO              reduce using rule 76 (factor -> FALSE .)
    ELSE            reduce using rule 76 (factor -> FALSE .)
    COMMA           reduce using rule 76 (factor -> FALSE .)
    RBRACKET        reduce using rule 76 (factor -> FALSE .)
    TO              reduce using rule 76 (factor -> FALSE .)
    DOWNTO          reduce using rule 76 (factor -> FALSE .)


state 46

    (81) factor -> NOT . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 86

state 47

    (12) variable_declaration -> VAR variable_list . SEMICOLON
    (15) variable_list -> variable_list . SEMICOLON variable

    SEMICOLON       shift and go to state 87


state 48

    (16) variable_list -> variable .

    SEMICOLON       reduce using rule 16 (variable_list -> variable .)


state 49

    (17) variable -> id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 88
    COMMA           shift and go to state 89


state 50

    (5) id_list -> ID .

    COLON           reduce using rule 5 (id_list -> ID .)
    COMMA           reduce using rule 5 (id_list -> ID .)
    RPAREN          reduce using rule 5 (id_list -> ID .)


state 51

    (13) function_declaration -> FUNCTION ID . parameter_list COLON type SEMICOLON block SEMICOLON
    (34) parameter_list -> . LPAREN parameter_section_list RPAREN
    (35) parameter_list -> . empty
    (6) empty -> .

    LPAREN          shift and go to state 91
    COLON           reduce using rule 6 (empty -> .)

    parameter_list                 shift and go to state 90
    empty                          shift and go to state 92

state 52

    (14) procedure_declaration -> PROCEDURE ID . parameter_list SEMICOLON block SEMICOLON
    (34) parameter_list -> . LPAREN parameter_section_list RPAREN
    (35) parameter_list -> . empty
    (6) empty -> .

    LPAREN          shift and go to state 91
    SEMICOLON       reduce using rule 6 (empty -> .)

    parameter_list                 shift and go to state 93
    empty                          shift and go to state 92

state 53

    (2) header -> PROGRAM ID LPAREN id_list . RPAREN SEMICOLON
    (4) id_list -> id_list . COMMA ID

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 89


state 54

    (40) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 40 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 40 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 40 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 40 (compound_statement -> BEGIN statement_list END .)


state 55

    (41) statement_list -> statement_list SEMICOLON . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    statement                      shift and go to state 95
    assignment_statement           shift and go to state 21
    expression                     shift and go to state 22
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 56

    (53) expression -> expression EQUALS . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 96
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 57

    (54) expression -> expression NE . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 97
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 58

    (55) expression -> expression LT . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 98
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 59

    (56) expression -> expression GT . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 99
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 60

    (57) expression -> expression LE . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 100
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 61

    (58) expression -> expression GE . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 101
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 62

    (59) expression -> expression IN . additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    additive_expression            shift and go to state 102
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 63

    (51) assignment_statement -> ID ASSIGN . expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 103
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 64

    (79) factor -> ID LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_list COMMA expression
    (83) expression_list -> . expression
    (84) expression_list -> . empty
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression_list                shift and go to state 104
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 65

    (61) additive_expression -> additive_expression PLUS . multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 107
    factor                         shift and go to state 41

state 66

    (62) additive_expression -> additive_expression MINUS . multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 108
    factor                         shift and go to state 41

state 67

    (63) additive_expression -> additive_expression OR . multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 109
    factor                         shift and go to state 41

state 68

    (64) additive_expression -> additive_expression ORELSE . multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    multiplicative_expression      shift and go to state 110
    factor                         shift and go to state 41

state 69

    (85) io_statement -> WRITE LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_list COMMA expression
    (83) expression_list -> . expression
    (84) expression_list -> . empty
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression_list                shift and go to state 111
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 70

    (77) factor -> LPAREN expression . RPAREN
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    RPAREN          shift and go to state 112
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 71

    (74) factor -> ID .
    (79) factor -> ID . LPAREN expression_list RPAREN

    LBRACKET        reduce using rule 74 (factor -> ID .)
    TIMES           reduce using rule 74 (factor -> ID .)
    DIVIDE          reduce using rule 74 (factor -> ID .)
    DIV             reduce using rule 74 (factor -> ID .)
    MOD             reduce using rule 74 (factor -> ID .)
    AND             reduce using rule 74 (factor -> ID .)
    ANDTHEN         reduce using rule 74 (factor -> ID .)
    PLUS            reduce using rule 74 (factor -> ID .)
    MINUS           reduce using rule 74 (factor -> ID .)
    OR              reduce using rule 74 (factor -> ID .)
    ORELSE          reduce using rule 74 (factor -> ID .)
    RPAREN          reduce using rule 74 (factor -> ID .)
    EQUALS          reduce using rule 74 (factor -> ID .)
    NE              reduce using rule 74 (factor -> ID .)
    LT              reduce using rule 74 (factor -> ID .)
    GT              reduce using rule 74 (factor -> ID .)
    LE              reduce using rule 74 (factor -> ID .)
    GE              reduce using rule 74 (factor -> ID .)
    IN              reduce using rule 74 (factor -> ID .)
    THEN            reduce using rule 74 (factor -> ID .)
    DO              reduce using rule 74 (factor -> ID .)
    END             reduce using rule 74 (factor -> ID .)
    SEMICOLON       reduce using rule 74 (factor -> ID .)
    ELSE            reduce using rule 74 (factor -> ID .)
    COMMA           reduce using rule 74 (factor -> ID .)
    RBRACKET        reduce using rule 74 (factor -> ID .)
    TO              reduce using rule 74 (factor -> ID .)
    DOWNTO          reduce using rule 74 (factor -> ID .)
    LPAREN          shift and go to state 64


state 72

    (86) io_statement -> WRITELN LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_list COMMA expression
    (83) expression_list -> . expression
    (84) expression_list -> . empty
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression_list                shift and go to state 113
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 73

    (87) io_statement -> READ LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_list COMMA expression
    (83) expression_list -> . expression
    (84) expression_list -> . empty
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression_list                shift and go to state 114
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 74

    (88) io_statement -> READLN LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_list COMMA expression
    (83) expression_list -> . expression
    (84) expression_list -> . empty
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    RPAREN          reduce using rule 6 (empty -> .)
    COMMA           reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression_list                shift and go to state 115
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 75

    (89) if_statement -> IF expression . THEN statement ELSE statement
    (90) if_statement -> IF expression . THEN statement
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    THEN            shift and go to state 116
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 76

    (91) while_statement -> WHILE expression . DO statement
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    DO              shift and go to state 117
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 77

    (92) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (93) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 118


state 78

    (66) multiplicative_expression -> multiplicative_expression TIMES . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 119

state 79

    (67) multiplicative_expression -> multiplicative_expression DIVIDE . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 120

state 80

    (68) multiplicative_expression -> multiplicative_expression DIV . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 121

state 81

    (69) multiplicative_expression -> multiplicative_expression MOD . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 122

state 82

    (70) multiplicative_expression -> multiplicative_expression AND . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 123

state 83

    (71) multiplicative_expression -> multiplicative_expression ANDTHEN . factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 124

state 84

    (80) factor -> MINUS factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    LBRACKET        reduce using rule 80 (factor -> MINUS factor .)
    TIMES           reduce using rule 80 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 80 (factor -> MINUS factor .)
    DIV             reduce using rule 80 (factor -> MINUS factor .)
    MOD             reduce using rule 80 (factor -> MINUS factor .)
    AND             reduce using rule 80 (factor -> MINUS factor .)
    ANDTHEN         reduce using rule 80 (factor -> MINUS factor .)
    PLUS            reduce using rule 80 (factor -> MINUS factor .)
    MINUS           reduce using rule 80 (factor -> MINUS factor .)
    OR              reduce using rule 80 (factor -> MINUS factor .)
    ORELSE          reduce using rule 80 (factor -> MINUS factor .)
    EQUALS          reduce using rule 80 (factor -> MINUS factor .)
    NE              reduce using rule 80 (factor -> MINUS factor .)
    LT              reduce using rule 80 (factor -> MINUS factor .)
    GT              reduce using rule 80 (factor -> MINUS factor .)
    LE              reduce using rule 80 (factor -> MINUS factor .)
    GE              reduce using rule 80 (factor -> MINUS factor .)
    IN              reduce using rule 80 (factor -> MINUS factor .)
    END             reduce using rule 80 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 80 (factor -> MINUS factor .)
    RPAREN          reduce using rule 80 (factor -> MINUS factor .)
    THEN            reduce using rule 80 (factor -> MINUS factor .)
    DO              reduce using rule 80 (factor -> MINUS factor .)
    ELSE            reduce using rule 80 (factor -> MINUS factor .)
    COMMA           reduce using rule 80 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 80 (factor -> MINUS factor .)
    TO              reduce using rule 80 (factor -> MINUS factor .)
    DOWNTO          reduce using rule 80 (factor -> MINUS factor .)

  ! LBRACKET        [ shift and go to state 85 ]


state 85

    (78) factor -> factor LBRACKET . expression RBRACKET
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    factor                         shift and go to state 41
    expression                     shift and go to state 125
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39

state 86

    (81) factor -> NOT factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    LBRACKET        reduce using rule 81 (factor -> NOT factor .)
    TIMES           reduce using rule 81 (factor -> NOT factor .)
    DIVIDE          reduce using rule 81 (factor -> NOT factor .)
    DIV             reduce using rule 81 (factor -> NOT factor .)
    MOD             reduce using rule 81 (factor -> NOT factor .)
    AND             reduce using rule 81 (factor -> NOT factor .)
    ANDTHEN         reduce using rule 81 (factor -> NOT factor .)
    PLUS            reduce using rule 81 (factor -> NOT factor .)
    MINUS           reduce using rule 81 (factor -> NOT factor .)
    OR              reduce using rule 81 (factor -> NOT factor .)
    ORELSE          reduce using rule 81 (factor -> NOT factor .)
    EQUALS          reduce using rule 81 (factor -> NOT factor .)
    NE              reduce using rule 81 (factor -> NOT factor .)
    LT              reduce using rule 81 (factor -> NOT factor .)
    GT              reduce using rule 81 (factor -> NOT factor .)
    LE              reduce using rule 81 (factor -> NOT factor .)
    GE              reduce using rule 81 (factor -> NOT factor .)
    IN              reduce using rule 81 (factor -> NOT factor .)
    END             reduce using rule 81 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 81 (factor -> NOT factor .)
    RPAREN          reduce using rule 81 (factor -> NOT factor .)
    THEN            reduce using rule 81 (factor -> NOT factor .)
    DO              reduce using rule 81 (factor -> NOT factor .)
    ELSE            reduce using rule 81 (factor -> NOT factor .)
    COMMA           reduce using rule 81 (factor -> NOT factor .)
    RBRACKET        reduce using rule 81 (factor -> NOT factor .)
    TO              reduce using rule 81 (factor -> NOT factor .)
    DOWNTO          reduce using rule 81 (factor -> NOT factor .)

  ! LBRACKET        [ shift and go to state 85 ]


state 87

    (12) variable_declaration -> VAR variable_list SEMICOLON .
    (15) variable_list -> variable_list SEMICOLON . variable
    (17) variable -> . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    BEGIN           reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    VAR             reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    FUNCTION        reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    PROCEDURE       reduce using rule 12 (variable_declaration -> VAR variable_list SEMICOLON .)
    ID              shift and go to state 50

    variable                       shift and go to state 126
    id_list                        shift and go to state 49

state 88

    (17) variable -> id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . STRING
    (30) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    ID              shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    BOOLEAN         shift and go to state 131
    CHAR            shift and go to state 132
    BYTE            shift and go to state 133
    WORD            shift and go to state 134
    LONGINT         shift and go to state 135
    SHORTINT        shift and go to state 136
    SINGLE          shift and go to state 137
    DOUBLE          shift and go to state 138
    STRING          shift and go to state 139
    ARRAY           shift and go to state 140

    type                           shift and go to state 127

state 89

    (4) id_list -> id_list COMMA . ID

    ID              shift and go to state 141


state 90

    (13) function_declaration -> FUNCTION ID parameter_list . COLON type SEMICOLON block SEMICOLON

    COLON           shift and go to state 142


state 91

    (34) parameter_list -> LPAREN . parameter_section_list RPAREN
    (36) parameter_section_list -> . parameter_section_list SEMICOLON parameter_section
    (37) parameter_section_list -> . parameter_section
    (38) parameter_section -> . id_list COLON type
    (39) parameter_section -> . VAR id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    VAR             shift and go to state 146
    ID              shift and go to state 50

    parameter_section_list         shift and go to state 143
    parameter_section              shift and go to state 144
    id_list                        shift and go to state 145

state 92

    (35) parameter_list -> empty .

    COLON           reduce using rule 35 (parameter_list -> empty .)
    SEMICOLON       reduce using rule 35 (parameter_list -> empty .)


state 93

    (14) procedure_declaration -> PROCEDURE ID parameter_list . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 147


state 94

    (2) header -> PROGRAM ID LPAREN id_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 148


state 95

    (41) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 41 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 41 (statement_list -> statement_list SEMICOLON statement .)


state 96

    (53) expression -> expression EQUALS additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    NE              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    LT              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    GT              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    LE              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    GE              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    IN              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    END             reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    RPAREN          reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    THEN            reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    DO              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    ELSE            reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    COMMA           reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    RBRACKET        reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    TO              reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    DOWNTO          reduce using rule 53 (expression -> expression EQUALS additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 97

    (54) expression -> expression NE additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 54 (expression -> expression NE additive_expression .)
    NE              reduce using rule 54 (expression -> expression NE additive_expression .)
    LT              reduce using rule 54 (expression -> expression NE additive_expression .)
    GT              reduce using rule 54 (expression -> expression NE additive_expression .)
    LE              reduce using rule 54 (expression -> expression NE additive_expression .)
    GE              reduce using rule 54 (expression -> expression NE additive_expression .)
    IN              reduce using rule 54 (expression -> expression NE additive_expression .)
    END             reduce using rule 54 (expression -> expression NE additive_expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression NE additive_expression .)
    RPAREN          reduce using rule 54 (expression -> expression NE additive_expression .)
    THEN            reduce using rule 54 (expression -> expression NE additive_expression .)
    DO              reduce using rule 54 (expression -> expression NE additive_expression .)
    ELSE            reduce using rule 54 (expression -> expression NE additive_expression .)
    COMMA           reduce using rule 54 (expression -> expression NE additive_expression .)
    RBRACKET        reduce using rule 54 (expression -> expression NE additive_expression .)
    TO              reduce using rule 54 (expression -> expression NE additive_expression .)
    DOWNTO          reduce using rule 54 (expression -> expression NE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 98

    (55) expression -> expression LT additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 55 (expression -> expression LT additive_expression .)
    NE              reduce using rule 55 (expression -> expression LT additive_expression .)
    LT              reduce using rule 55 (expression -> expression LT additive_expression .)
    GT              reduce using rule 55 (expression -> expression LT additive_expression .)
    LE              reduce using rule 55 (expression -> expression LT additive_expression .)
    GE              reduce using rule 55 (expression -> expression LT additive_expression .)
    IN              reduce using rule 55 (expression -> expression LT additive_expression .)
    END             reduce using rule 55 (expression -> expression LT additive_expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression LT additive_expression .)
    RPAREN          reduce using rule 55 (expression -> expression LT additive_expression .)
    THEN            reduce using rule 55 (expression -> expression LT additive_expression .)
    DO              reduce using rule 55 (expression -> expression LT additive_expression .)
    ELSE            reduce using rule 55 (expression -> expression LT additive_expression .)
    COMMA           reduce using rule 55 (expression -> expression LT additive_expression .)
    RBRACKET        reduce using rule 55 (expression -> expression LT additive_expression .)
    TO              reduce using rule 55 (expression -> expression LT additive_expression .)
    DOWNTO          reduce using rule 55 (expression -> expression LT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 99

    (56) expression -> expression GT additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 56 (expression -> expression GT additive_expression .)
    NE              reduce using rule 56 (expression -> expression GT additive_expression .)
    LT              reduce using rule 56 (expression -> expression GT additive_expression .)
    GT              reduce using rule 56 (expression -> expression GT additive_expression .)
    LE              reduce using rule 56 (expression -> expression GT additive_expression .)
    GE              reduce using rule 56 (expression -> expression GT additive_expression .)
    IN              reduce using rule 56 (expression -> expression GT additive_expression .)
    END             reduce using rule 56 (expression -> expression GT additive_expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression GT additive_expression .)
    RPAREN          reduce using rule 56 (expression -> expression GT additive_expression .)
    THEN            reduce using rule 56 (expression -> expression GT additive_expression .)
    DO              reduce using rule 56 (expression -> expression GT additive_expression .)
    ELSE            reduce using rule 56 (expression -> expression GT additive_expression .)
    COMMA           reduce using rule 56 (expression -> expression GT additive_expression .)
    RBRACKET        reduce using rule 56 (expression -> expression GT additive_expression .)
    TO              reduce using rule 56 (expression -> expression GT additive_expression .)
    DOWNTO          reduce using rule 56 (expression -> expression GT additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 100

    (57) expression -> expression LE additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 57 (expression -> expression LE additive_expression .)
    NE              reduce using rule 57 (expression -> expression LE additive_expression .)
    LT              reduce using rule 57 (expression -> expression LE additive_expression .)
    GT              reduce using rule 57 (expression -> expression LE additive_expression .)
    LE              reduce using rule 57 (expression -> expression LE additive_expression .)
    GE              reduce using rule 57 (expression -> expression LE additive_expression .)
    IN              reduce using rule 57 (expression -> expression LE additive_expression .)
    END             reduce using rule 57 (expression -> expression LE additive_expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression LE additive_expression .)
    RPAREN          reduce using rule 57 (expression -> expression LE additive_expression .)
    THEN            reduce using rule 57 (expression -> expression LE additive_expression .)
    DO              reduce using rule 57 (expression -> expression LE additive_expression .)
    ELSE            reduce using rule 57 (expression -> expression LE additive_expression .)
    COMMA           reduce using rule 57 (expression -> expression LE additive_expression .)
    RBRACKET        reduce using rule 57 (expression -> expression LE additive_expression .)
    TO              reduce using rule 57 (expression -> expression LE additive_expression .)
    DOWNTO          reduce using rule 57 (expression -> expression LE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 101

    (58) expression -> expression GE additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 58 (expression -> expression GE additive_expression .)
    NE              reduce using rule 58 (expression -> expression GE additive_expression .)
    LT              reduce using rule 58 (expression -> expression GE additive_expression .)
    GT              reduce using rule 58 (expression -> expression GE additive_expression .)
    LE              reduce using rule 58 (expression -> expression GE additive_expression .)
    GE              reduce using rule 58 (expression -> expression GE additive_expression .)
    IN              reduce using rule 58 (expression -> expression GE additive_expression .)
    END             reduce using rule 58 (expression -> expression GE additive_expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression GE additive_expression .)
    RPAREN          reduce using rule 58 (expression -> expression GE additive_expression .)
    THEN            reduce using rule 58 (expression -> expression GE additive_expression .)
    DO              reduce using rule 58 (expression -> expression GE additive_expression .)
    ELSE            reduce using rule 58 (expression -> expression GE additive_expression .)
    COMMA           reduce using rule 58 (expression -> expression GE additive_expression .)
    RBRACKET        reduce using rule 58 (expression -> expression GE additive_expression .)
    TO              reduce using rule 58 (expression -> expression GE additive_expression .)
    DOWNTO          reduce using rule 58 (expression -> expression GE additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 102

    (59) expression -> expression IN additive_expression .
    (61) additive_expression -> additive_expression . PLUS multiplicative_expression
    (62) additive_expression -> additive_expression . MINUS multiplicative_expression
    (63) additive_expression -> additive_expression . OR multiplicative_expression
    (64) additive_expression -> additive_expression . ORELSE multiplicative_expression

    EQUALS          reduce using rule 59 (expression -> expression IN additive_expression .)
    NE              reduce using rule 59 (expression -> expression IN additive_expression .)
    LT              reduce using rule 59 (expression -> expression IN additive_expression .)
    GT              reduce using rule 59 (expression -> expression IN additive_expression .)
    LE              reduce using rule 59 (expression -> expression IN additive_expression .)
    GE              reduce using rule 59 (expression -> expression IN additive_expression .)
    IN              reduce using rule 59 (expression -> expression IN additive_expression .)
    END             reduce using rule 59 (expression -> expression IN additive_expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression IN additive_expression .)
    RPAREN          reduce using rule 59 (expression -> expression IN additive_expression .)
    THEN            reduce using rule 59 (expression -> expression IN additive_expression .)
    DO              reduce using rule 59 (expression -> expression IN additive_expression .)
    ELSE            reduce using rule 59 (expression -> expression IN additive_expression .)
    COMMA           reduce using rule 59 (expression -> expression IN additive_expression .)
    RBRACKET        reduce using rule 59 (expression -> expression IN additive_expression .)
    TO              reduce using rule 59 (expression -> expression IN additive_expression .)
    DOWNTO          reduce using rule 59 (expression -> expression IN additive_expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    OR              shift and go to state 67
    ORELSE          shift and go to state 68


state 103

    (51) assignment_statement -> ID ASSIGN expression .
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    END             reduce using rule 51 (assignment_statement -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 51 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 51 (assignment_statement -> ID ASSIGN expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 104

    (79) factor -> ID LPAREN expression_list . RPAREN
    (82) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 150


state 105

    (83) expression_list -> expression .
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    RPAREN          reduce using rule 83 (expression_list -> expression .)
    COMMA           reduce using rule 83 (expression_list -> expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 106

    (84) expression_list -> empty .

    RPAREN          reduce using rule 84 (expression_list -> empty .)
    COMMA           reduce using rule 84 (expression_list -> empty .)


state 107

    (61) additive_expression -> additive_expression PLUS multiplicative_expression .
    (66) multiplicative_expression -> multiplicative_expression . TIMES factor
    (67) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (68) multiplicative_expression -> multiplicative_expression . DIV factor
    (69) multiplicative_expression -> multiplicative_expression . MOD factor
    (70) multiplicative_expression -> multiplicative_expression . AND factor
    (71) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ORELSE          reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IN              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THEN            reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DO              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TO              reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOWNTO          reduce using rule 61 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    DIV             shift and go to state 80
    MOD             shift and go to state 81
    AND             shift and go to state 82
    ANDTHEN         shift and go to state 83


state 108

    (62) additive_expression -> additive_expression MINUS multiplicative_expression .
    (66) multiplicative_expression -> multiplicative_expression . TIMES factor
    (67) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (68) multiplicative_expression -> multiplicative_expression . DIV factor
    (69) multiplicative_expression -> multiplicative_expression . MOD factor
    (70) multiplicative_expression -> multiplicative_expression . AND factor
    (71) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ORELSE          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IN              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THEN            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DO              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TO              reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOWNTO          reduce using rule 62 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    DIV             shift and go to state 80
    MOD             shift and go to state 81
    AND             shift and go to state 82
    ANDTHEN         shift and go to state 83


state 109

    (63) additive_expression -> additive_expression OR multiplicative_expression .
    (66) multiplicative_expression -> multiplicative_expression . TIMES factor
    (67) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (68) multiplicative_expression -> multiplicative_expression . DIV factor
    (69) multiplicative_expression -> multiplicative_expression . MOD factor
    (70) multiplicative_expression -> multiplicative_expression . AND factor
    (71) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    MINUS           reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    OR              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    ORELSE          reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    EQUALS          reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    NE              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    LT              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    GT              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    LE              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    GE              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    IN              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    END             reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    SEMICOLON       reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    RPAREN          reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    THEN            reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    DO              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    ELSE            reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    COMMA           reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    RBRACKET        reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    TO              reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    DOWNTO          reduce using rule 63 (additive_expression -> additive_expression OR multiplicative_expression .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    DIV             shift and go to state 80
    MOD             shift and go to state 81
    AND             shift and go to state 82
    ANDTHEN         shift and go to state 83


state 110

    (64) additive_expression -> additive_expression ORELSE multiplicative_expression .
    (66) multiplicative_expression -> multiplicative_expression . TIMES factor
    (67) multiplicative_expression -> multiplicative_expression . DIVIDE factor
    (68) multiplicative_expression -> multiplicative_expression . DIV factor
    (69) multiplicative_expression -> multiplicative_expression . MOD factor
    (70) multiplicative_expression -> multiplicative_expression . AND factor
    (71) multiplicative_expression -> multiplicative_expression . ANDTHEN factor

    PLUS            reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    MINUS           reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    OR              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    ORELSE          reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    EQUALS          reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    NE              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    LT              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    GT              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    LE              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    GE              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    IN              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    END             reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    SEMICOLON       reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    RPAREN          reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    THEN            reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    DO              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    ELSE            reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    COMMA           reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    RBRACKET        reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    TO              reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    DOWNTO          reduce using rule 64 (additive_expression -> additive_expression ORELSE multiplicative_expression .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79
    DIV             shift and go to state 80
    MOD             shift and go to state 81
    AND             shift and go to state 82
    ANDTHEN         shift and go to state 83


state 111

    (85) io_statement -> WRITE LPAREN expression_list . RPAREN
    (82) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 151
    COMMA           shift and go to state 150


state 112

    (77) factor -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    ANDTHEN         reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    ORELSE          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    IN              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 77 (factor -> LPAREN expression RPAREN .)


state 113

    (86) io_statement -> WRITELN LPAREN expression_list . RPAREN
    (82) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 152
    COMMA           shift and go to state 150


state 114

    (87) io_statement -> READ LPAREN expression_list . RPAREN
    (82) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 153
    COMMA           shift and go to state 150


state 115

    (88) io_statement -> READLN LPAREN expression_list . RPAREN
    (82) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 154
    COMMA           shift and go to state 150


state 116

    (89) if_statement -> IF expression THEN . statement ELSE statement
    (90) if_statement -> IF expression THEN . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 155
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 117

    (91) while_statement -> WHILE expression DO . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 156
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 118

    (92) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (93) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 157
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 119

    (66) multiplicative_expression -> multiplicative_expression TIMES factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DIVIDE          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DIV             reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    MOD             reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    AND             reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ANDTHEN         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    PLUS            reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    MINUS           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    OR              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ORELSE          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    EQUALS          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    NE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LT              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    GT              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    GE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    IN              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    END             reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    SEMICOLON       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    RPAREN          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    THEN            reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DO              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    ELSE            reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    COMMA           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    RBRACKET        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    TO              reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    DOWNTO          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TIMES factor .)
    LBRACKET        shift and go to state 85


state 120

    (67) multiplicative_expression -> multiplicative_expression DIVIDE factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DIVIDE          reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DIV             reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    MOD             reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    AND             reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ANDTHEN         reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    PLUS            reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    MINUS           reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    OR              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ORELSE          reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    EQUALS          reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    NE              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LT              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    GT              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LE              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    GE              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    IN              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    END             reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    SEMICOLON       reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    RPAREN          reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    THEN            reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DO              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    ELSE            reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    COMMA           reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    RBRACKET        reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    TO              reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    DOWNTO          reduce using rule 67 (multiplicative_expression -> multiplicative_expression DIVIDE factor .)
    LBRACKET        shift and go to state 85


state 121

    (68) multiplicative_expression -> multiplicative_expression DIV factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DIVIDE          reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DIV             reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    MOD             reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    AND             reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ANDTHEN         reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    PLUS            reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    MINUS           reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    OR              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ORELSE          reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    EQUALS          reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    NE              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LT              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    GT              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LE              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    GE              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    IN              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    END             reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    SEMICOLON       reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    RPAREN          reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    THEN            reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DO              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    ELSE            reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    COMMA           reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    RBRACKET        reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    TO              reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    DOWNTO          reduce using rule 68 (multiplicative_expression -> multiplicative_expression DIV factor .)
    LBRACKET        shift and go to state 85


state 122

    (69) multiplicative_expression -> multiplicative_expression MOD factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DIVIDE          reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DIV             reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    MOD             reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    AND             reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ANDTHEN         reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    PLUS            reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    MINUS           reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    OR              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ORELSE          reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    EQUALS          reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    NE              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LT              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    GT              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LE              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    GE              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    IN              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    END             reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    SEMICOLON       reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    RPAREN          reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    THEN            reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DO              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    ELSE            reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    COMMA           reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    RBRACKET        reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    TO              reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    DOWNTO          reduce using rule 69 (multiplicative_expression -> multiplicative_expression MOD factor .)
    LBRACKET        shift and go to state 85


state 123

    (70) multiplicative_expression -> multiplicative_expression AND factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    DIVIDE          reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    DIV             reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    MOD             reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    AND             reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    ANDTHEN         reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    PLUS            reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    MINUS           reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    OR              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    ORELSE          reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    EQUALS          reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    NE              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    LT              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    GT              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    LE              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    GE              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    IN              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    END             reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    SEMICOLON       reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    RPAREN          reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    THEN            reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    DO              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    ELSE            reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    COMMA           reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    RBRACKET        reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    TO              reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    DOWNTO          reduce using rule 70 (multiplicative_expression -> multiplicative_expression AND factor .)
    LBRACKET        shift and go to state 85


state 124

    (71) multiplicative_expression -> multiplicative_expression ANDTHEN factor .
    (78) factor -> factor . LBRACKET expression RBRACKET

    TIMES           reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DIVIDE          reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DIV             reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    MOD             reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    AND             reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ANDTHEN         reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    PLUS            reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    MINUS           reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    OR              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ORELSE          reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    EQUALS          reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    NE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LT              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    GT              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    GE              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    IN              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    END             reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    SEMICOLON       reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    RPAREN          reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    THEN            reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DO              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    ELSE            reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    COMMA           reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    RBRACKET        reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    TO              reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    DOWNTO          reduce using rule 71 (multiplicative_expression -> multiplicative_expression ANDTHEN factor .)
    LBRACKET        shift and go to state 85


state 125

    (78) factor -> factor LBRACKET expression . RBRACKET
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    RBRACKET        shift and go to state 158
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 126

    (15) variable_list -> variable_list SEMICOLON variable .

    SEMICOLON       reduce using rule 15 (variable_list -> variable_list SEMICOLON variable .)


state 127

    (17) variable -> id_list COLON type .

    SEMICOLON       reduce using rule 17 (variable -> id_list COLON type .)


state 128

    (18) type -> ID .

    SEMICOLON       reduce using rule 18 (type -> ID .)
    RPAREN          reduce using rule 18 (type -> ID .)


state 129

    (19) type -> INTEGER .

    SEMICOLON       reduce using rule 19 (type -> INTEGER .)
    RPAREN          reduce using rule 19 (type -> INTEGER .)


state 130

    (20) type -> REAL .

    SEMICOLON       reduce using rule 20 (type -> REAL .)
    RPAREN          reduce using rule 20 (type -> REAL .)


state 131

    (21) type -> BOOLEAN .

    SEMICOLON       reduce using rule 21 (type -> BOOLEAN .)
    RPAREN          reduce using rule 21 (type -> BOOLEAN .)


state 132

    (22) type -> CHAR .

    SEMICOLON       reduce using rule 22 (type -> CHAR .)
    RPAREN          reduce using rule 22 (type -> CHAR .)


state 133

    (23) type -> BYTE .

    SEMICOLON       reduce using rule 23 (type -> BYTE .)
    RPAREN          reduce using rule 23 (type -> BYTE .)


state 134

    (24) type -> WORD .

    SEMICOLON       reduce using rule 24 (type -> WORD .)
    RPAREN          reduce using rule 24 (type -> WORD .)


state 135

    (25) type -> LONGINT .

    SEMICOLON       reduce using rule 25 (type -> LONGINT .)
    RPAREN          reduce using rule 25 (type -> LONGINT .)


state 136

    (26) type -> SHORTINT .

    SEMICOLON       reduce using rule 26 (type -> SHORTINT .)
    RPAREN          reduce using rule 26 (type -> SHORTINT .)


state 137

    (27) type -> SINGLE .

    SEMICOLON       reduce using rule 27 (type -> SINGLE .)
    RPAREN          reduce using rule 27 (type -> SINGLE .)


state 138

    (28) type -> DOUBLE .

    SEMICOLON       reduce using rule 28 (type -> DOUBLE .)
    RPAREN          reduce using rule 28 (type -> DOUBLE .)


state 139

    (29) type -> STRING .

    SEMICOLON       reduce using rule 29 (type -> STRING .)
    RPAREN          reduce using rule 29 (type -> STRING .)


state 140

    (30) type -> ARRAY . LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    LBRACKET        shift and go to state 159


state 141

    (4) id_list -> id_list COMMA ID .

    COLON           reduce using rule 4 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 4 (id_list -> id_list COMMA ID .)
    RPAREN          reduce using rule 4 (id_list -> id_list COMMA ID .)


state 142

    (13) function_declaration -> FUNCTION ID parameter_list COLON . type SEMICOLON block SEMICOLON
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . STRING
    (30) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    ID              shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    BOOLEAN         shift and go to state 131
    CHAR            shift and go to state 132
    BYTE            shift and go to state 133
    WORD            shift and go to state 134
    LONGINT         shift and go to state 135
    SHORTINT        shift and go to state 136
    SINGLE          shift and go to state 137
    DOUBLE          shift and go to state 138
    STRING          shift and go to state 139
    ARRAY           shift and go to state 140

    type                           shift and go to state 160

state 143

    (34) parameter_list -> LPAREN parameter_section_list . RPAREN
    (36) parameter_section_list -> parameter_section_list . SEMICOLON parameter_section

    RPAREN          shift and go to state 161
    SEMICOLON       shift and go to state 162


state 144

    (37) parameter_section_list -> parameter_section .

    RPAREN          reduce using rule 37 (parameter_section_list -> parameter_section .)
    SEMICOLON       reduce using rule 37 (parameter_section_list -> parameter_section .)


state 145

    (38) parameter_section -> id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 163
    COMMA           shift and go to state 89


state 146

    (39) parameter_section -> VAR . id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    ID              shift and go to state 50

    id_list                        shift and go to state 164

state 147

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 165
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 148

    (2) header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .

    BEGIN           reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    VAR             reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)
    PROCEDURE       reduce using rule 2 (header -> PROGRAM ID LPAREN id_list RPAREN SEMICOLON .)


state 149

    (79) factor -> ID LPAREN expression_list RPAREN .

    LBRACKET        reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    ANDTHEN         reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    ORELSE          reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    EQUALS          reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    NE              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    LE              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    GE              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    IN              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 79 (factor -> ID LPAREN expression_list RPAREN .)


state 150

    (82) expression_list -> expression_list COMMA . expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 166
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 151

    (85) io_statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 85 (io_statement -> WRITE LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 85 (io_statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 85 (io_statement -> WRITE LPAREN expression_list RPAREN .)


state 152

    (86) io_statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 86 (io_statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 86 (io_statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 86 (io_statement -> WRITELN LPAREN expression_list RPAREN .)


state 153

    (87) io_statement -> READ LPAREN expression_list RPAREN .

    END             reduce using rule 87 (io_statement -> READ LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 87 (io_statement -> READ LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 87 (io_statement -> READ LPAREN expression_list RPAREN .)


state 154

    (88) io_statement -> READLN LPAREN expression_list RPAREN .

    END             reduce using rule 88 (io_statement -> READLN LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 88 (io_statement -> READLN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 88 (io_statement -> READLN LPAREN expression_list RPAREN .)


state 155

    (89) if_statement -> IF expression THEN statement . ELSE statement
    (90) if_statement -> IF expression THEN statement .

    ELSE            shift and go to state 167
    END             reduce using rule 90 (if_statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 90 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 90 (if_statement -> IF expression THEN statement .) ]


state 156

    (91) while_statement -> WHILE expression DO statement .

    END             reduce using rule 91 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 91 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 91 (while_statement -> WHILE expression DO statement .)


state 157

    (92) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (93) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    TO              shift and go to state 168
    DOWNTO          shift and go to state 169
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 158

    (78) factor -> factor LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    DIV             reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    MOD             reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    AND             reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    ANDTHEN         reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    OR              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    ORELSE          reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    NE              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    LT              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    GT              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    LE              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    GE              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    IN              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    END             reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    THEN            reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    DO              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    TO              reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 78 (factor -> factor LBRACKET expression RBRACKET .)


state 159

    (30) type -> ARRAY LBRACKET . NUMBER DOT DOT NUMBER RBRACKET OF type

    NUMBER          shift and go to state 170


state 160

    (13) function_declaration -> FUNCTION ID parameter_list COLON type . SEMICOLON block SEMICOLON

    SEMICOLON       shift and go to state 171


state 161

    (34) parameter_list -> LPAREN parameter_section_list RPAREN .

    COLON           reduce using rule 34 (parameter_list -> LPAREN parameter_section_list RPAREN .)
    SEMICOLON       reduce using rule 34 (parameter_list -> LPAREN parameter_section_list RPAREN .)


state 162

    (36) parameter_section_list -> parameter_section_list SEMICOLON . parameter_section
    (38) parameter_section -> . id_list COLON type
    (39) parameter_section -> . VAR id_list COLON type
    (4) id_list -> . id_list COMMA ID
    (5) id_list -> . ID

    VAR             shift and go to state 146
    ID              shift and go to state 50

    parameter_section              shift and go to state 172
    id_list                        shift and go to state 145

state 163

    (38) parameter_section -> id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . STRING
    (30) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    ID              shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    BOOLEAN         shift and go to state 131
    CHAR            shift and go to state 132
    BYTE            shift and go to state 133
    WORD            shift and go to state 134
    LONGINT         shift and go to state 135
    SHORTINT        shift and go to state 136
    SINGLE          shift and go to state 137
    DOUBLE          shift and go to state 138
    STRING          shift and go to state 139
    ARRAY           shift and go to state 140

    type                           shift and go to state 173

state 164

    (39) parameter_section -> VAR id_list . COLON type
    (4) id_list -> id_list . COMMA ID

    COLON           shift and go to state 174
    COMMA           shift and go to state 89


state 165

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 175


state 166

    (82) expression_list -> expression_list COMMA expression .
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    RPAREN          reduce using rule 82 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 82 (expression_list -> expression_list COMMA expression .)
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 167

    (89) if_statement -> IF expression THEN statement ELSE . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 176
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 168

    (92) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 177
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 169

    (93) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    ID              shift and go to state 71
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 178
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 170

    (30) type -> ARRAY LBRACKET NUMBER . DOT DOT NUMBER RBRACKET OF type

    DOT             shift and go to state 179


state 171

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON . block SEMICOLON
    (7) block -> . declarations compound_statement
    (8) declarations -> . declarations variable_declaration
    (9) declarations -> . declarations function_declaration
    (10) declarations -> . declarations procedure_declaration
    (11) declarations -> . empty
    (6) empty -> .

    BEGIN           reduce using rule 6 (empty -> .)
    VAR             reduce using rule 6 (empty -> .)
    FUNCTION        reduce using rule 6 (empty -> .)
    PROCEDURE       reduce using rule 6 (empty -> .)

    block                          shift and go to state 180
    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 172

    (36) parameter_section_list -> parameter_section_list SEMICOLON parameter_section .

    RPAREN          reduce using rule 36 (parameter_section_list -> parameter_section_list SEMICOLON parameter_section .)
    SEMICOLON       reduce using rule 36 (parameter_section_list -> parameter_section_list SEMICOLON parameter_section .)


state 173

    (38) parameter_section -> id_list COLON type .

    RPAREN          reduce using rule 38 (parameter_section -> id_list COLON type .)
    SEMICOLON       reduce using rule 38 (parameter_section -> id_list COLON type .)


state 174

    (39) parameter_section -> VAR id_list COLON . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . STRING
    (30) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    ID              shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    BOOLEAN         shift and go to state 131
    CHAR            shift and go to state 132
    BYTE            shift and go to state 133
    WORD            shift and go to state 134
    LONGINT         shift and go to state 135
    SHORTINT        shift and go to state 136
    SINGLE          shift and go to state 137
    DOUBLE          shift and go to state 138
    STRING          shift and go to state 139
    ARRAY           shift and go to state 140

    type                           shift and go to state 181

state 175

    (14) procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 14 (procedure_declaration -> PROCEDURE ID parameter_list SEMICOLON block SEMICOLON .)


state 176

    (89) if_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 89 (if_statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 89 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 89 (if_statement -> IF expression THEN statement ELSE statement .)


state 177

    (92) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    DO              shift and go to state 182
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 178

    (93) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (53) expression -> expression . EQUALS additive_expression
    (54) expression -> expression . NE additive_expression
    (55) expression -> expression . LT additive_expression
    (56) expression -> expression . GT additive_expression
    (57) expression -> expression . LE additive_expression
    (58) expression -> expression . GE additive_expression
    (59) expression -> expression . IN additive_expression

    DO              shift and go to state 183
    EQUALS          shift and go to state 56
    NE              shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    IN              shift and go to state 62


state 179

    (30) type -> ARRAY LBRACKET NUMBER DOT . DOT NUMBER RBRACKET OF type

    DOT             shift and go to state 184


state 180

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block . SEMICOLON

    SEMICOLON       shift and go to state 185


state 181

    (39) parameter_section -> VAR id_list COLON type .

    RPAREN          reduce using rule 39 (parameter_section -> VAR id_list COLON type .)
    SEMICOLON       reduce using rule 39 (parameter_section -> VAR id_list COLON type .)


state 182

    (92) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 186
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 183

    (93) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (43) statement -> . assignment_statement
    (44) statement -> . expression
    (45) statement -> . compound_statement
    (46) statement -> . io_statement
    (47) statement -> . if_statement
    (48) statement -> . while_statement
    (49) statement -> . for_statement
    (50) statement -> . empty
    (51) assignment_statement -> . ID ASSIGN expression
    (52) expression -> . additive_expression
    (53) expression -> . expression EQUALS additive_expression
    (54) expression -> . expression NE additive_expression
    (55) expression -> . expression LT additive_expression
    (56) expression -> . expression GT additive_expression
    (57) expression -> . expression LE additive_expression
    (58) expression -> . expression GE additive_expression
    (59) expression -> . expression IN additive_expression
    (40) compound_statement -> . BEGIN statement_list END
    (85) io_statement -> . WRITE LPAREN expression_list RPAREN
    (86) io_statement -> . WRITELN LPAREN expression_list RPAREN
    (87) io_statement -> . READ LPAREN expression_list RPAREN
    (88) io_statement -> . READLN LPAREN expression_list RPAREN
    (89) if_statement -> . IF expression THEN statement ELSE statement
    (90) if_statement -> . IF expression THEN statement
    (91) while_statement -> . WHILE expression DO statement
    (92) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (93) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement
    (6) empty -> .
    (60) additive_expression -> . multiplicative_expression
    (61) additive_expression -> . additive_expression PLUS multiplicative_expression
    (62) additive_expression -> . additive_expression MINUS multiplicative_expression
    (63) additive_expression -> . additive_expression OR multiplicative_expression
    (64) additive_expression -> . additive_expression ORELSE multiplicative_expression
    (65) multiplicative_expression -> . factor
    (66) multiplicative_expression -> . multiplicative_expression TIMES factor
    (67) multiplicative_expression -> . multiplicative_expression DIVIDE factor
    (68) multiplicative_expression -> . multiplicative_expression DIV factor
    (69) multiplicative_expression -> . multiplicative_expression MOD factor
    (70) multiplicative_expression -> . multiplicative_expression AND factor
    (71) multiplicative_expression -> . multiplicative_expression ANDTHEN factor
    (72) factor -> . NUMBER
    (73) factor -> . STRING
    (74) factor -> . ID
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . factor LBRACKET expression RBRACKET
    (79) factor -> . ID LPAREN expression_list RPAREN
    (80) factor -> . MINUS factor
    (81) factor -> . NOT factor

    ID              shift and go to state 29
    BEGIN           shift and go to state 13
    WRITE           shift and go to state 31
    WRITELN         shift and go to state 33
    READ            shift and go to state 34
    READLN          shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    FOR             shift and go to state 38
    ELSE            reduce using rule 6 (empty -> .)
    END             reduce using rule 6 (empty -> .)
    SEMICOLON       reduce using rule 6 (empty -> .)
    NUMBER          shift and go to state 42
    STRING          shift and go to state 43
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    LPAREN          shift and go to state 32
    MINUS           shift and go to state 40
    NOT             shift and go to state 46

    expression                     shift and go to state 22
    statement                      shift and go to state 187
    assignment_statement           shift and go to state 21
    compound_statement             shift and go to state 23
    io_statement                   shift and go to state 24
    if_statement                   shift and go to state 25
    while_statement                shift and go to state 26
    for_statement                  shift and go to state 27
    empty                          shift and go to state 28
    additive_expression            shift and go to state 30
    multiplicative_expression      shift and go to state 39
    factor                         shift and go to state 41

state 184

    (30) type -> ARRAY LBRACKET NUMBER DOT DOT . NUMBER RBRACKET OF type

    NUMBER          shift and go to state 188


state 185

    (13) function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .

    BEGIN           reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    VAR             reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    FUNCTION        reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)
    PROCEDURE       reduce using rule 13 (function_declaration -> FUNCTION ID parameter_list COLON type SEMICOLON block SEMICOLON .)


state 186

    (92) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 92 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMICOLON       reduce using rule 92 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 92 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 187

    (93) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 93 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    SEMICOLON       reduce using rule 93 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 93 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)


state 188

    (30) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER . RBRACKET OF type

    RBRACKET        shift and go to state 189


state 189

    (30) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET . OF type

    OF              shift and go to state 190


state 190

    (30) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF . type
    (18) type -> . ID
    (19) type -> . INTEGER
    (20) type -> . REAL
    (21) type -> . BOOLEAN
    (22) type -> . CHAR
    (23) type -> . BYTE
    (24) type -> . WORD
    (25) type -> . LONGINT
    (26) type -> . SHORTINT
    (27) type -> . SINGLE
    (28) type -> . DOUBLE
    (29) type -> . STRING
    (30) type -> . ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type

    ID              shift and go to state 128
    INTEGER         shift and go to state 129
    REAL            shift and go to state 130
    BOOLEAN         shift and go to state 131
    CHAR            shift and go to state 132
    BYTE            shift and go to state 133
    WORD            shift and go to state 134
    LONGINT         shift and go to state 135
    SHORTINT        shift and go to state 136
    SINGLE          shift and go to state 137
    DOUBLE          shift and go to state 138
    STRING          shift and go to state 139
    ARRAY           shift and go to state 140

    type                           shift and go to state 191

state 191

    (30) type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .

    SEMICOLON       reduce using rule 30 (type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .)
    RPAREN          reduce using rule 30 (type -> ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF type .)

